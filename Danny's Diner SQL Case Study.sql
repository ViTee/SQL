DROP TABLE IF EXISTS  SALES;
DROP TABLE IF EXISTS  MENU;
DROP TABLE IF EXISTS  MEMBERS;

CREATE TABLE SALES (
  "CUSTOMER_ID" VARCHAR(1),
  "ORDER_DATE" DATE,
  "PRODUCT_ID" INTEGER
);

INSERT INTO SALES
  ("CUSTOMER_ID", "ORDER_DATE", "PRODUCT_ID")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE MENU (
  "PRODUCT_ID" INTEGER,
  "PRODUCT_NAME" VARCHAR(5),
  "PRICE" INTEGER
);

INSERT INTO MENU
  ("PRODUCT_ID", "PRODUCT_NAME", "PRICE")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE MEMBERS (
  "CUSTOMER_ID" VARCHAR(1),
  "JOIN_DATE" DATE
);

INSERT INTO MEMBERS
  ("CUSTOMER_ID", "JOIN_DATE")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');

-- 1. What is the total amount each customer spent at the restaurant?
-- 2. How many days has each customer visited the restaurant?
-- 3. What was the first item from the menu purchased by each customer?
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- 5. Which item was the most popular for each customer?
-- 6. Which item was purchased first by the customer after they became a member?
-- 7. Which item was purchased just before the customer became a member?
-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT* FROM SALES;
SELECT* FROM  MENU;
SELECT* FROM  MEMBERS;

--1,2
SELECT S.CUSTOMER_ID, SUM(MN.PRICE) AS TOTAL_AMOUNT, COUNT (DISTINCT S.ORDER_DATE) AS NUMBER_OF_DAYS
FROM SALES S 
INNER JOIN MENU MN ON S.PRODUCT_ID = MN.PRODUCT_ID
GROUP BY S.CUSTOMER_ID;

--3
WITH T1 AS (SELECT S.CUSTOMER_ID, MIN(S.ORDER_DATE) AS FIRST_DAY
FROM SALES S 
GROUP BY S.CUSTOMER_ID),
T2 AS (SELECT DISTINCT T1.CUSTOMER_ID AS CUSTOMER_ID, MN.PRODUCT_NAME
FROM T1 INNER JOIN SALES S 
ON T1.FIRST_DAY = S.ORDER_DATE AND T1.CUSTOMER_ID = S.CUSTOMER_ID
INNER JOIN MENU MN
ON S.PRODUCT_ID = MN.PRODUCT_ID
GROUP BY T1.CUSTOMER_ID,MN.PRODUCT_NAME)
SELECT CUSTOMER_ID, STRING_AGG(PRODUCT_NAME,',') AS FIRST_PRODUCT
FROM T2
GROUP BY CUSTOMER_ID;

--4
WITH T1 AS (SELECT TOP 1 PRODUCT_ID AS TOP_PRODUCT
FROM SALES S 
GROUP BY PRODUCT_ID  
ORDER BY COUNT(*) DESC)
SELECT S.CUSTOMER_ID, T1.TOP_PRODUCT, COUNT(S.PRODUCT_ID) AS TIMES
FROM SALES S INNER JOIN T1 ON S.PRODUCT_ID = T1.TOP_PRODUCT
GROUP BY S.CUSTOMER_ID, T1.TOP_PRODUCT;

--5
WITH T1 AS (SELECT CUSTOMER_ID, PRODUCT_ID, RANK() OVER (PARTITION BY CUSTOMER_ID ORDER BY COUNT(*)) AS POPULAR
FROM SALES S
GROUP BY CUSTOMER_ID, PRODUCT_ID)
SELECT T1.CUSTOMER_ID, STRING_AGG(MN.PRODUCT_NAME,',') AS POPULAR_PRODUCTS
FROM T1 INNER JOIN MENU MN ON T1.PRODUCT_ID = MN.PRODUCT_ID
WHERE T1.POPULAR = 1
GROUP BY T1.CUSTOMER_ID;

--6
WITH T1 AS (SELECT S.CUSTOMER_ID, S.ORDER_DATE, RANK() OVER (PARTITION BY S.CUSTOMER_ID ORDER BY S.ORDER_DATE) AS FIRST_DAY, S.PRODUCT_ID
FROM SALES S INNER JOIN MEMBERS MB ON S.CUSTOMER_ID = MB.CUSTOMER_ID
WHERE S.ORDER_DATE >= MB.JOIN_DATE
GROUP BY S.CUSTOMER_ID, S.ORDER_DATE, S.PRODUCT_ID)
SELECT T1.CUSTOMER_ID, STRING_AGG(MN.PRODUCT_NAME,',') AS FIRST_PRODUCT
FROM MENU MN INNER JOIN T1 ON MN.PRODUCT_ID = T1.PRODUCT_ID
WHERE T1.FIRST_DAY = 1
GROUP BY T1.CUSTOMER_ID;

--7
WITH T1 AS (SELECT S.CUSTOMER_ID, S.ORDER_DATE, RANK() OVER (PARTITION BY S.CUSTOMER_ID ORDER BY S.ORDER_DATE DESC) AS LAST_DAY, S.PRODUCT_ID
FROM SALES S INNER JOIN MEMBERS MB ON S.CUSTOMER_ID = MB.CUSTOMER_ID
WHERE S.ORDER_DATE < MB.JOIN_DATE
GROUP BY S.CUSTOMER_ID, S.ORDER_DATE, S.PRODUCT_ID)
SELECT T1.CUSTOMER_ID, STRING_AGG(MN.PRODUCT_NAME,',') AS LAST_PRODUCT
FROM MENU MN INNER JOIN T1 ON MN.PRODUCT_ID = T1.PRODUCT_ID
WHERE T1.LAST_DAY = 1
GROUP BY T1.CUSTOMER_ID;

--8
WITH T1 AS (SELECT S.CUSTOMER_ID, S.ORDER_DATE, S.PRODUCT_ID
FROM SALES S INNER JOIN MEMBERS MB ON S.CUSTOMER_ID = MB.CUSTOMER_ID INNER JOIN MENU MN ON S.PRODUCT_ID = MN.PRODUCT_ID
WHERE S.ORDER_DATE < MB.JOIN_DATE
GROUP BY S.CUSTOMER_ID, S.ORDER_DATE,S.PRODUCT_ID)
SELECT T1.CUSTOMER_ID, COUNT(*) AS TOTAL_ITEMS, SUM(MN.PRICE) AS AMOUNT_SPENT
FROM T1 INNER JOIN MENU MN ON T1.PRODUCT_ID = MN.PRODUCT_ID
GROUP BY T1.CUSTOMER_ID;

--9
SELECT S.CUSTOMER_ID, SUM
(CASE
  WHEN MN.PRODUCT_NAME = 'SUSHI' THEN 20*MN.PRICE
  ELSE 10*MN.PRICE
 END) AS TOTAL_POINTS
FROM SALES S INNER JOIN MENU MN ON S.PRODUCT_ID = MN.PRODUCT_ID
GROUP BY S.CUSTOMER_ID;

--10
SELECT S.CUSTOMER_ID, SUM(
CASE 
 WHEN MB.JOIN_DATE <= S.ORDER_DATE AND S.ORDER_DATE <= DATEADD(DD, 7, MB.JOIN_DATE) THEN 20*MN.PRICE
 WHEN MN.PRODUCT_NAME = 'SUSHI' THEN 20*MN.PRICE
 ELSE 10*MN.PRICE
END) AS TOTAL
FROM SALES S INNER JOIN MEMBERS MB ON S.CUSTOMER_ID = MB.CUSTOMER_ID
INNER JOIN MENU MN ON S.PRODUCT_ID = MN.PRODUCT_ID
WHERE MONTH(S.ORDER_DATE)=1
GROUP BY S.CUSTOMER_ID;



